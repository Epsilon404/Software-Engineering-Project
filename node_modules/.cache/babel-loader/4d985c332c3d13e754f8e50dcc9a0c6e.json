{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport Mock from 'mockjs'; // get请求从config.url获取参数，post从config.body中获取参数\n\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n\n  if (!search) {\n    return {};\n  }\n\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n}\n\nvar List = [];\nvar count = 200;\n\nfor (var i = 0; i < count; i++) {\n  List.push(Mock.mock({\n    id: Mock.Random.guid(),\n    name: Mock.Random.cname(),\n    account: Mock.Random.email('cuhk.edu.cn'),\n    password: Mock.Random.string(6, 10)\n  }));\n}\n\nexport default {\n  /**\n   * 获取列表\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\n   * @param name, page, limit\n   * @return {{code: number, count: number, data: *[]}}\n   */\n  getUserList: function getUserList(config) {\n    var _param2Obj = param2Obj(config.url),\n        name = _param2Obj.name,\n        _param2Obj$page = _param2Obj.page,\n        page = _param2Obj$page === void 0 ? 1 : _param2Obj$page,\n        _param2Obj$limit = _param2Obj.limit,\n        limit = _param2Obj$limit === void 0 ? 20 : _param2Obj$limit;\n\n    console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit);\n    var mockList = List.filter(function (user) {\n      if (name && user.name.indexOf(name) === -1) return false;\n      return true;\n    });\n    var pageList = mockList.filter(function (item, index) {\n      return index < limit * page && index >= limit * (page - 1);\n    });\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    };\n  },\n\n  /**\n   * 增加用户\n   * @param name, account, password\n   * @return {{code: number, data: {message: string}}}\n   */\n  createUser: function createUser(config) {\n    var _JSON$parse = JSON.parse(config.body),\n        name = _JSON$parse.name,\n        account = _JSON$parse.account,\n        password = _JSON$parse.password;\n\n    console.log(JSON.parse(config.body));\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      account: account,\n      password: password\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '添加成功'\n      }\n    };\n  },\n\n  /**\n   * 删除用户\n   * @param id\n   * @return {*}\n   */\n  deleteUser: function deleteUser(config) {\n    var _param2Obj2 = param2Obj(config.url),\n        id = _param2Obj2.id;\n\n    if (!id) {\n      return {\n        code: -999,\n        message: '参数不正确'\n      };\n    } else {\n      List = List.filter(function (u) {\n        return u.id !== id;\n      });\n      return {\n        code: 20000,\n        message: '删除成功'\n      };\n    }\n  },\n\n  /**\n   * 批量删除\n   * @param config\n   * @return {{code: number, data: {message: string}}}\n   */\n  batchremove: function batchremove(config) {\n    var _param2Obj3 = param2Obj(config.url),\n        ids = _param2Obj3.ids;\n\n    ids = ids.split(',');\n    List = List.filter(function (u) {\n      return !ids.includes(u.id);\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '批量删除成功'\n      }\n    };\n  },\n\n  /**\n   * 修改用户\n   * @param id, name, account, password\n   * @return {{code: number, data: {message: string}}}\n   */\n  updateUser: function updateUser(config) {\n    var _JSON$parse2 = JSON.parse(config.body),\n        name = _JSON$parse2.name,\n        account = _JSON$parse2.account,\n        password = _JSON$parse2.password;\n\n    List.some(function (u) {\n      if (u.id === id) {\n        u.name = name;\n        u.account = account;\n        u.password = password;\n        return true;\n      }\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '编辑成功'\n      }\n    };\n  }\n};","map":{"version":3,"sources":["D:/CSC4001/Project/scs/api/mockServerData/user.js"],"names":["Mock","param2Obj","url","search","split","JSON","parse","decodeURIComponent","replace","List","count","i","push","mock","id","Random","guid","name","cname","account","email","password","string","getUserList","config","page","limit","console","log","mockList","filter","user","indexOf","pageList","item","index","code","length","list","createUser","body","unshift","data","message","deleteUser","u","batchremove","ids","includes","updateUser","some"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAMC,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAf;;AACA,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AACD,SAAOE,IAAI,CAACC,KAAL,CACL,OACAC,kBAAkB,CAACJ,MAAD,CAAlB,CACGK,OADH,CACW,IADX,EACiB,KADjB,EAEGA,OAFH,CAEW,IAFX,EAEiB,KAFjB,EAGGA,OAHH,CAGW,IAHX,EAGiB,KAHjB,CADA,GAKA,IANK,CAAP;AAQD;;AAED,IAAIC,IAAI,GAAG,EAAX;AACA,IAAMC,KAAK,GAAG,GAAd;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC9BF,EAAAA,IAAI,CAACG,IAAL,CACEZ,IAAI,CAACa,IAAL,CAAU;AACRC,IAAAA,EAAE,EAAEd,IAAI,CAACe,MAAL,CAAYC,IAAZ,EADI;AAERC,IAAAA,IAAI,EAAEjB,IAAI,CAACe,MAAL,CAAYG,KAAZ,EAFE;AAGRC,IAAAA,OAAO,EAAEnB,IAAI,CAACe,MAAL,CAAYK,KAAZ,CAAkB,aAAlB,CAHD;AAIRC,IAAAA,QAAQ,EAAErB,IAAI,CAACe,MAAL,CAAYO,MAAZ,CAAmB,CAAnB,EAAsB,EAAtB;AAJF,GAAV,CADF;AAQD;;AAED,eAAe;AACb;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,qBAAAC,MAAM,EAAI;AACrB,qBAAuCvB,SAAS,CAACuB,MAAM,CAACtB,GAAR,CAAhD;AAAA,QAAQe,IAAR,cAAQA,IAAR;AAAA,qCAAcQ,IAAd;AAAA,QAAcA,IAAd,gCAAqB,CAArB;AAAA,sCAAwBC,KAAxB;AAAA,QAAwBA,KAAxB,iCAAgC,EAAhC;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUX,IAAtB,EAA4B,UAAUQ,IAAtC,EAA4C,eAAeC,KAA3D;AACA,QAAMG,QAAQ,GAAGpB,IAAI,CAACqB,MAAL,CAAY,UAAAC,IAAI,EAAI;AACnC,UAAId,IAAI,IAAIc,IAAI,CAACd,IAAL,CAAUe,OAAV,CAAkBf,IAAlB,MAA4B,CAAC,CAAzC,EAA4C,OAAO,KAAP;AAC5C,aAAO,IAAP;AACD,KAHgB,CAAjB;AAIA,QAAMgB,QAAQ,GAAGJ,QAAQ,CAACC,MAAT,CAAgB,UAACI,IAAD,EAAOC,KAAP;AAAA,aAAiBA,KAAK,GAAGT,KAAK,GAAGD,IAAhB,IAAwBU,KAAK,IAAIT,KAAK,IAAID,IAAI,GAAG,CAAX,CAAvD;AAAA,KAAhB,CAAjB;AACA,WAAO;AACLW,MAAAA,IAAI,EAAE,KADD;AAEL1B,MAAAA,KAAK,EAAEmB,QAAQ,CAACQ,MAFX;AAGLC,MAAAA,IAAI,EAAEL;AAHD,KAAP;AAKD,GApBY;;AAqBb;AACF;AACA;AACA;AACA;AACEM,EAAAA,UAAU,EAAE,oBAAAf,MAAM,EAAI;AACpB,sBAAoCnB,IAAI,CAACC,KAAL,CAAWkB,MAAM,CAACgB,IAAlB,CAApC;AAAA,QAAQvB,IAAR,eAAQA,IAAR;AAAA,QAAcE,OAAd,eAAcA,OAAd;AAAA,QAAuBE,QAAvB,eAAuBA,QAAvB;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYvB,IAAI,CAACC,KAAL,CAAWkB,MAAM,CAACgB,IAAlB,CAAZ;AACA/B,IAAAA,IAAI,CAACgC,OAAL,CAAa;AACX3B,MAAAA,EAAE,EAAEd,IAAI,CAACe,MAAL,CAAYC,IAAZ,EADO;AAEXC,MAAAA,IAAI,EAAEA,IAFK;AAGXE,MAAAA,OAAO,EAAEA,OAHE;AAIXE,MAAAA,QAAQ,EAAEA;AAJC,KAAb;AAMA,WAAO;AACLe,MAAAA,IAAI,EAAE,KADD;AAELM,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AAFD,KAAP;AAMD,GAzCY;;AA0Cb;AACF;AACA;AACA;AACA;AACEC,EAAAA,UAAU,EAAE,oBAAApB,MAAM,EAAI;AACpB,sBAAevB,SAAS,CAACuB,MAAM,CAACtB,GAAR,CAAxB;AAAA,QAAQY,EAAR,eAAQA,EAAR;;AACA,QAAI,CAACA,EAAL,EAAS;AACP,aAAO;AACLsB,QAAAA,IAAI,EAAE,CAAC,GADF;AAELO,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID,KALD,MAKO;AACLlC,MAAAA,IAAI,GAAGA,IAAI,CAACqB,MAAL,CAAY,UAAAe,CAAC;AAAA,eAAIA,CAAC,CAAC/B,EAAF,KAASA,EAAb;AAAA,OAAb,CAAP;AACA,aAAO;AACLsB,QAAAA,IAAI,EAAE,KADD;AAELO,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AACF,GA7DY;;AA8Db;AACF;AACA;AACA;AACA;AACEG,EAAAA,WAAW,EAAE,qBAAAtB,MAAM,EAAI;AACrB,sBAAcvB,SAAS,CAACuB,MAAM,CAACtB,GAAR,CAAvB;AAAA,QAAM6C,GAAN,eAAMA,GAAN;;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAAC3C,KAAJ,CAAU,GAAV,CAAN;AACAK,IAAAA,IAAI,GAAGA,IAAI,CAACqB,MAAL,CAAY,UAAAe,CAAC;AAAA,aAAI,CAACE,GAAG,CAACC,QAAJ,CAAaH,CAAC,CAAC/B,EAAf,CAAL;AAAA,KAAb,CAAP;AACA,WAAO;AACLsB,MAAAA,IAAI,EAAE,KADD;AAELM,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AAFD,KAAP;AAMD,GA7EY;;AA8Eb;AACF;AACA;AACA;AACA;AACEM,EAAAA,UAAU,EAAE,oBAAAzB,MAAM,EAAI;AACpB,uBAAoCnB,IAAI,CAACC,KAAL,CAAWkB,MAAM,CAACgB,IAAlB,CAApC;AAAA,QAAQvB,IAAR,gBAAQA,IAAR;AAAA,QAAcE,OAAd,gBAAcA,OAAd;AAAA,QAAuBE,QAAvB,gBAAuBA,QAAvB;;AACAZ,IAAAA,IAAI,CAACyC,IAAL,CAAU,UAAAL,CAAC,EAAI;AACb,UAAIA,CAAC,CAAC/B,EAAF,KAASA,EAAb,EAAiB;AACf+B,QAAAA,CAAC,CAAC5B,IAAF,GAASA,IAAT;AACA4B,QAAAA,CAAC,CAAC1B,OAAF,GAAYA,OAAZ;AACA0B,QAAAA,CAAC,CAACxB,QAAF,GAAaA,QAAb;AACA,eAAO,IAAP;AACD;AACF,KAPD;AAQA,WAAO;AACLe,MAAAA,IAAI,EAAE,KADD;AAELM,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AAFD,KAAP;AAMD;AAnGY,CAAf","sourcesContent":["import Mock from 'mockjs'\n\n// get请求从config.url获取参数，post从config.body中获取参数\nfunction param2Obj (url) {\n  const search = url.split('?')[1]\n  if (!search) {\n    return {}\n  }\n  return JSON.parse(\n    '{\"' +\n    decodeURIComponent(search)\n      .replace(/\"/g, '\\\\\"')\n      .replace(/&/g, '\",\"')\n      .replace(/=/g, '\":\"') +\n    '\"}'\n  )\n}\n\nlet List = []\nconst count = 200\n\nfor (let i = 0; i < count; i++) {\n  List.push(\n    Mock.mock({\n      id: Mock.Random.guid(),\n      name: Mock.Random.cname(),\n      account: Mock.Random.email('cuhk.edu.cn'),\n      password: Mock.Random.string(6, 10)\n    })\n  )\n}\n\nexport default {\n  /**\n   * 获取列表\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\n   * @param name, page, limit\n   * @return {{code: number, count: number, data: *[]}}\n   */\n  getUserList: config => {\n    const { name, page = 1, limit = 20 } = param2Obj(config.url)\n    console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit)\n    const mockList = List.filter(user => {\n      if (name && user.name.indexOf(name) === -1) return false\n      return true\n    })\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1))\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    }\n  },\n  /**\n   * 增加用户\n   * @param name, account, password\n   * @return {{code: number, data: {message: string}}}\n   */\n  createUser: config => {\n    const { name, account, password } = JSON.parse(config.body)\n    console.log(JSON.parse(config.body))\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      account: account,\n      password: password,\n    })\n    return {\n      code: 20000,\n      data: {\n        message: '添加成功'\n      }\n    }\n  },\n  /**\n   * 删除用户\n   * @param id\n   * @return {*}\n   */\n  deleteUser: config => {\n    const { id } = param2Obj(config.url)\n    if (!id) {\n      return {\n        code: -999,\n        message: '参数不正确'\n      }\n    } else {\n      List = List.filter(u => u.id !== id)\n      return {\n        code: 20000,\n        message: '删除成功'\n      }\n    }\n  },\n  /**\n   * 批量删除\n   * @param config\n   * @return {{code: number, data: {message: string}}}\n   */\n  batchremove: config => {\n    let { ids } = param2Obj(config.url)\n    ids = ids.split(',')\n    List = List.filter(u => !ids.includes(u.id))\n    return {\n      code: 20000,\n      data: {\n        message: '批量删除成功'\n      }\n    }\n  },\n  /**\n   * 修改用户\n   * @param id, name, account, password\n   * @return {{code: number, data: {message: string}}}\n   */\n  updateUser: config => {\n    const { name, account, password } = JSON.parse(config.body)\n    List.some(u => {\n      if (u.id === id) {\n        u.name = name\n        u.account = account\n        u.password = password\n        return true\n      }\n    })\n    return {\n      code: 20000,\n      data: {\n        message: '编辑成功'\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}