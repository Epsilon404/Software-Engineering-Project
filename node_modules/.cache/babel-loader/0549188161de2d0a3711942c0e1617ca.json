{"ast":null,"code":"import _objectSpread from \"D:/CSC4001/Project/scs/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/CSC4001/Project/scs/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/CSC4001/Project/scs/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// 二次封装axios 拦截器\nimport axios from 'axios';\nimport config from '../config/index'; // 设置配置 根据开发 和 生产环境不一样 \n\nvar baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;\n\nvar HttpRequst = /*#__PURE__*/function () {\n  function HttpRequst(baseUrl) {\n    _classCallCheck(this, HttpRequst);\n\n    this.baseUrl = baseUrl;\n  }\n\n  _createClass(HttpRequst, [{\n    key: \"getInsideConfig\",\n    value: function getInsideConfig() {\n      var config = {\n        baseURL: this.baseUrl,\n        header: {}\n      };\n      return config;\n    }\n  }, {\n    key: \"interceptors\",\n    value: function interceptors(instance) {\n      instance.interceptors.request.use(function (config) {\n        // 在发送请求之前做些什么\n        console.log('拦截处理请求');\n        return config;\n      }, function (error) {\n        // 对请求错误做些什么\n        return Promise.reject(error);\n      });\n      instance.interceptors.response.use(function (response) {\n        console.log('处理相应'); // 对响应数据做点什么\n\n        return response.data;\n      }, function (error) {\n        console.log(error); // 对响应错误做点什么\n\n        return Promise.reject(error);\n      });\n    } // {\n    //   baseURL:'/rApi'\n    // }\n\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      // 请求\n      // /api/getList  /api/getHome\n      var instanse = axios.create(); // 技巧\n      // /api // api1\n\n      options = _objectSpread(_objectSpread({}, this.getInsideConfig()), options); // console.log(options);\n\n      this.interceptors(instanse);\n      return instanse(options);\n    }\n  }]);\n\n  return HttpRequst;\n}();\n\nexport default new HttpRequst(baseUrl);","map":{"version":3,"sources":["D:/CSC4001/Project/scs/api/axios.js"],"names":["axios","config","baseUrl","process","env","NODE_ENV","dev","pro","HttpRequst","baseURL","header","instance","interceptors","request","use","console","log","error","Promise","reject","response","data","options","instanse","create","getInsideConfig"],"mappings":";;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CACA;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;;IACMC,U;AACJ,sBAAYN,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;WACD,2BAAmB;AACjB,UAAMD,MAAM,GAAG;AACbQ,QAAAA,OAAO,EAAE,KAAKP,OADD;AAEbQ,QAAAA,MAAM,EAAE;AAFK,OAAf;AAMA,aAAOT,MAAP;AACD;;;WACD,sBAAcU,QAAd,EAAwB;AACtBA,MAAAA,QAAQ,CAACC,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUb,MAAV,EAAkB;AAClD;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,eAAOf,MAAP;AACD,OAJD,EAIG,UAAUgB,KAAV,EAAiB;AAClB;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OAPD;AASAN,MAAAA,QAAQ,CAACC,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmC,UAAUM,QAAV,EAAoB;AACrDL,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADqD,CAErD;;AACA,eAAOI,QAAQ,CAACC,IAAhB;AACD,OAJD,EAIG,UAAUJ,KAAV,EAAiB;AAClBF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EADkB,CAElB;;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OARD;AASD,K,CACD;AACA;AACA;;;;WACA,iBAASK,OAAT,EAAkB;AAChB;AACA;AACA,UAAMC,QAAQ,GAAGvB,KAAK,CAACwB,MAAN,EAAjB,CAHgB,CAIhB;AACA;;AACAF,MAAAA,OAAO,mCAAS,KAAKG,eAAL,EAAT,GAAqCH,OAArC,CAAP,CANgB,CAOhB;;AACA,WAAKV,YAAL,CAAkBW,QAAlB;AACA,aAAOA,QAAQ,CAACD,OAAD,CAAf;AACD;;;;;;AAGH,eAAe,IAAId,UAAJ,CAAeN,OAAf,CAAf","sourcesContent":["// 二次封装axios 拦截器\n\nimport axios from 'axios'\nimport config from '../config/index'\n// 设置配置 根据开发 和 生产环境不一样 \nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\nclass HttpRequst {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl\n  }\n  getInsideConfig () {\n    const config = {\n      baseURL: this.baseUrl,\n      header: {\n\n      }\n    }\n    return config\n  }\n  interceptors (instance) {\n    instance.interceptors.request.use(function (config) {\n      // 在发送请求之前做些什么\n      console.log('拦截处理请求');\n      return config;\n    }, function (error) {\n      // 对请求错误做些什么\n      return Promise.reject(error);\n    });\n\n    instance.interceptors.response.use(function (response) {\n      console.log('处理相应');\n      // 对响应数据做点什么\n      return response.data;\n    }, function (error) {\n      console.log(error);\n      // 对响应错误做点什么\n      return Promise.reject(error);\n    });\n  }\n  // {\n  //   baseURL:'/rApi'\n  // }\n  request (options) {\n    // 请求\n    // /api/getList  /api/getHome\n    const instanse = axios.create()\n    // 技巧\n    // /api // api1\n    options = { ...(this.getInsideConfig()), ...options }\n    // console.log(options);\n    this.interceptors(instanse)\n    return instanse(options)\n  }\n}\n\nexport default new HttpRequst(baseUrl)"]},"metadata":{},"sourceType":"module"}